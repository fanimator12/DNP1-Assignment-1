@page "/AddFamily"
@using Assignment1.Models
@using Assignment1.Persistence
@using Assignment1.Data.Persistence
@using Assignment1.Data
@attribute [Authorize(Policy = "LoggedIn")]
@inject IFamiliesService FamilyService;
@inject FileContext FileContext
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider

<AuthorizeView>
    <h3>Hello @context.User.Identity.Name</h3>
</AuthorizeView>

 <h3>Add Adults</h3>
<p>This page can only be viewed, if you are logged in.</p>

<EditForm Model="@newAdult" OnValidSubmit="@AddNewAdult">
    <DataAnnotationsValidator/>
    <ValidationSummary/>
    @*<div class="col-12 row">
        <span class="col-6">
            <div class="form-group">
                Street Name: <br/>
                <InputText @bind-Value="newFamilyItem.StreetName"/>
            </div>
        </span>
        <span class="col-6">
            <div class="form-group">
                House Number: <br/>
                <InputNumber @bind-Value="newFamilyItem.HouseNumber"/>
            </div>
        </span>
    </div>
    *@
    <div id="addAdultForm">
        <h3 id="AddAdult" xmlns="http://www.w3.org/1999/html">Add Adult</h3>
    </div>

    <div class="col-12 row">
        <span class="col-6">
            <div class="form-group">
                Job Title: <br/>
                <InputText @bind-Value="newAdult.JobTitle"/>
            </div>
        </span>
        <span class="col-6">
            <div class="form-group">
                First Name: <br/>
                <InputText @bind-Value="newAdult.FirstName"/>
            </div>
        </span>
    </div>
    <div class="col-12 row">
        <span class="col-6">
            <div class="form-group">
                Last Name: <br/>
                <InputText @bind-Value="newAdult.LastName"/>
            </div>
        </span>
        <span class="col-6">
            <div class="form-group">
                Hair Color: <br/>
                <InputText @bind-Value="newAdult.HairColor"/>
            </div>
        </span>
    </div>
    <div class="col-12 row">
        <span class="col-6">
            <div class="form-group">
                Eye Color: <br/>
                <InputText @bind-Value="newAdult.EyeColor"/>
            </div>
        </span>
        <span class="col-6">
            <div class="form-group">
                Age: <br/>
                <InputNumber @bind-Value="newAdult.Age"/>
            </div>
        </span>
    </div>
    <div class="col-12 row">
        <span class="col-6">
            <div class="form-group">
                Weight: <br/>
                <InputNumber @bind-Value="newAdult.Weight"/>
            </div>
        </span>
        <span class="col-6">
            <div class="form-group">
                Height: <br/>
                <InputNumber @bind-Value="newAdult.Height"/>
            </div>
        </span>
    </div>
    <div class="col-12 row">
        <span class="col-6">
            <div class="form-group">
                Sex: <br/>
                <InputText @bind-Value="newAdult.Sex"/>
            </div>
        </span>
        <span class="col-6">
            <div>
                ID: <br/>
                <InputNumber @bind-Value="newAdult.Id"/>
            </div>
        </span>
    </div>
    <div class="col-12 row">
        <span class="col-6">
            <div>@errorMessage</div>
        </span>
        <span class="col-6">
            <p class="actions">
                <button class="btn btn-outline-dark" @onclick="AddNewAdult" type="submit">Create</button>
            </p>
        </span>
    </div>
    
</EditForm>

@code {
    /*private readonly Family newFamilyItem = new Family();*/
    private Adult newAdult = new Adult();
    /*private readonly Child newChild = new Child();
    private readonly Pet newPet = new Pet();*/
    private string errorMessage;

    /*private void AddNewFamily()
    {
        errorMessage = "";
        try
        {
            FileContext.AddAdult(newAdult);
            NavigationManager.NavigateTo("/Families");
        }
        catch (Exception e)
        {
            errorMessage = e.Message;
        }
    }*/

    private async Task AddNewAdult()
    {
        errorMessage = "";
        try
        {
            /*FamilyService.ValidatePerson(newAdult.FirstName, newAdult.LastName, newAdult.Sex, newAdult.Id);*/

            FileContext.AddAdult(newAdult);
            NavigationManager.NavigateTo("/Families");
        }
        catch (Exception e)
        {
            errorMessage = e.Message;
        }
    }

    /*private void AddNewChild()
    {
        errorMessage = "";
        try
        {
            FamilyService.ValidatePerson(newChild.FirstName, newChild.LastName, newChild.Sex, newChild.Id);

            FileContext.AddChild(newChild);
            NavigationManager.NavigateTo("/Child");
        }
        catch (Exception e)
        {
            errorMessage = e.Message;
        }
    }
    
    private void AddNewPet()
    {
        errorMessage = "";
        try
        {
            FamilyService.ValidatePet(newPet.Species, newPet.Name, newPet.Age, newPet.Id);

            FileContext.AddPet(newPet);
            NavigationManager.NavigateTo("/Pet");
        }
        catch (Exception e)
        {
            errorMessage = e.Message;
        }
    }*/

    [CascadingParameter]
    protected Task<AuthenticationState> AuthStat { get; set; }

    protected override async Task OnInitializedAsync()
    {
        base.OnInitialized();
        var user = (await AuthStat).User;
        if (!user.Identity.IsAuthenticated)
        {
            NavigationManager.NavigateTo("/");
        }
    }

}
