@page "/Families"
@using Assignment1.Data
@using Assignment1.Models
@inject IFamiliesService FamilyService

<h1 xmlns="http://www.w3.org/1999/html">Family list</h1>
<p>
    Filter by User Id: <input type="number" style="width:50px"/>
</p>
@if (familiesToShow == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else if (!familiesToShow.Any())
{
    <p>
        <em>No Family items exist. Please add some.</em>
    </p>
}
else
{
    <table class="table">
        <thead>
        <tr>
            <th>User ID</th>
            <th>Address</th>
            <th>Adults</th>
            <th>Children</th>
            <th>Pets</th>
            <th>Remove</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var item in familiesToShow)
        {
            <tr>
                <td>@item.Id</td>
                <td>
                    @item.StreetName <br> @item.HouseNumber
                </td>
                <td>@item.Adults</td>
                <td>@item.Children</td>
                <td>@item.Pets</td>
                <td>
                    <button @onclick="@() => RemoveFamily(item.Id)">
                        <i class="oi oi-trash" style="color:red"/>
                    </button>
                </td>
            </tr>
        }
        </tbody>
    </table>
}

@code {
    private IList<Family> familiesToShow;
    private IList<Family> allFamilies;

    private int? filterById;

    private void FilterByUserId(ChangeEventArgs changeEventArgs)
    {
        filterById = null;
        try
        {
            filterById = int.Parse(changeEventArgs.Value.ToString());
        }
        catch (Exception e)
        {
        }
        ExecuteFilter();
    }

    private void ExecuteFilter()
    {
        familiesToShow = allFamilies.Where(t =>
            filterById != null && t.Id == filterById || filterById == null
            ).ToList();
    }

    protected override async Task OnInitializedAsync()
    {
        allFamilies = FamilyService.GetFamilies();
        familiesToShow = allFamilies;
    }

    private void RemoveFamily(int familyId)
    {
        var familyToRemove = familiesToShow.First(t => t.Id == familyId);
        FamilyService.RemoveFamily(familyId);
        familiesToShow.Remove(familyToRemove);
    }

    private void CompletedChange(ChangeEventArgs evt, Family family)
    {
        FamilyService.Update(family);
    }

}