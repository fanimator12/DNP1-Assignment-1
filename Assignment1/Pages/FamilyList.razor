@page "/Families"
@using Assignment1.Models
@using Assignment1.Persistence
@attribute [Authorize(Policy = "LoggedIn")]
@inject FileContext FileContext
@inject NavigationManager Navigation;

<h1 xmlns="http://www.w3.org/1999/html">Adult list</h1>

<div id="form-group">
    <p>
        Filter by User ID: <input type="number" @oninput="@((arg) => FilterByUserId(arg))" style="width:50px"/>
    </p>
</div>

<div id="form-group">
    <p>
        Filter by Last Name: <input type="text" @oninput="@((arg) => FilterByLastName(arg))" style="width:50px"/>
    </p>
</div>

@if (allAdults == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else if (!allAdults.Any())
{
    <p>
        <em>No Adult items exist. Please add some.</em>
    </p>
}
else
{
    <table class="table">
        <thead>
        <tr>
            <th>Job Title</th>
            <th>Id</th>
            <th>First Name</th>
            <th>Last Name</th>
            <th>Hair Color</th>
            <th>Eye Color</th>
            <th>Age</th>
            <th>Weight</th>
            <th>Height</th>
            <th>Sex</th>
            <th>Remove</th>
        </tr>
        </thead>
        
        <tbody>
        @foreach (var adult in adultsToShow)
        {
            <tr>
                <td>@adult.JobTitle</td>
                <td>@adult.Id</td>
                <td>@adult.FirstName</td>
                <td>@adult.LastName</td>
                <td>@adult.HairColor</td>
                <td>@adult.EyeColor</td>
                <td>@adult.Age</td>
                <td>@adult.Weight</td>
                <td>@adult.Height</td>
                <td>@adult.Sex</td>
                <td>
                    <button @onclick="@(() => RemoveAdult(adult.Id))">
                        <i class="oi oi-trash" style="color:red"/>
                    </button>
                </td>
            </tr>
        }
        </tbody>
    </table>
}

@code {
    private IList<Adult> adultsToShow;
    private IList<Adult> allAdults;

    private int? filterById;
    private string? filterByLastName;

    
    [CascadingParameter]
    private Task<AuthenticationState> AuthenticationStateTask { get; set; }

    private void FilterByUserId(ChangeEventArgs changeEventArgs)
    {
        string errorMessage = "";
        filterById = null;
        try
        {
            filterById = int.Parse(changeEventArgs.Value.ToString());
        }
        catch (Exception e)
        {
            errorMessage = e.Message;
        }
        ExecuteFilter();
    }

    private void FilterByLastName(ChangeEventArgs args)
    {
        string errorMessage = "";
        filterByLastName = null;
        try
        {
            filterByLastName = args.Value.ToString();
            if (args.Value.Equals(""))
            {
                filterByLastName = null;
            }
        }
        catch (Exception e)
        {
            errorMessage = e.Message;
        }
        ExecuteFilter();
    }
    private void ExecuteFilter()
    {
        adultsToShow = allAdults.Where(t =>
            (filterById != null && t.Id == filterById || filterById == null) &&
            (filterByLastName != null && t.LastName == filterByLastName || filterByLastName == null)).ToList();
    }

    protected override async Task OnInitializedAsync()
    {
        var authenticationState = await AuthenticationStateTask;
        if (authenticationState?.User?.Identity is null || !authenticationState.User.Identity.IsAuthenticated)
        {
            var returnUrl = Navigation.ToBaseRelativePath(Navigation.Uri);
            
            if (string.IsNullOrWhiteSpace(returnUrl))
                Navigation.NavigateTo("/Login", true);
            else
            {
                Navigation.NavigateTo($"/Login?returnUrl={returnUrl}",true);
            }
        }
        allAdults = FileContext.GetAdults();
        adultsToShow = allAdults;
    }

    private void RemoveAdult(int adultId)
    {
        Adult adultToRemove = adultsToShow.First(t => t.Id == adultId);
        FileContext.RemoveAdult(adultId);
        adultsToShow.Remove(adultToRemove);
    }

}