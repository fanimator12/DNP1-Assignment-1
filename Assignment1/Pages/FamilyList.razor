@page "/Families"
@using Assignment1.Data
@using Assignment1.Models
@inject IFamiliesService FamilyService
@inject NavigationManager Navigation;

<h1 xmlns="http://www.w3.org/1999/html">Family list</h1>
<p>
    Filter by User Id: <input type="number" @oninput="@((arg) => FilterByUserId(arg))" style="width:50px"/>
</p>

@if (familiesToShow == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else if (!familiesToShow.Any())
{
    <p>
        <em>No Family items exist. Please add some.</em>
    </p>
}
else
{
    <table class="table">
        <thead>
        <tr>
            <th>User ID</th>
            <th>Address</th>
            <th>Adults</th>
            <th>Remove</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var item in familiesToShow)
        {
            <tr>
                <td>@item.Id</td>
                <td>
                    @item.StreetName <br> @item.HouseNumber
                </td>
            @*@foreach (var adultItem in allAdults)
                {
                    <td>@adultItem.JobTitle</td>
                    <td>@adultItem.Id</td>
                    <td>@adultItem.FirstName</td>
                    <td>@adultItem.LastName</td>
                    <td>@adultItem.HairColor</td>
                    <td>@adultItem.EyeColor</td>
                    <td>@adultItem.Age</td>
                    <td>@adultItem.Weight</td>
                    <td>@adultItem.Height</td>
                    <td>@adultItem.Sex</td>
                }*@
                <td>
                    <button @onclick="@(() => RemoveFamily(item.Id))">
                        <i class="oi oi-trash" style="color:red"/>
                    </button>
                </td>
            </tr>
        }
        </tbody>
    </table>
}

@code {
    private IList<Family> familiesToShow;
    private IList<Family> allFamilies;
    private IList<Adult> allAdults;

    private int? filterById;
    
    [CascadingParameter]
    private Task<AuthenticationState> AuthenticationStateTask { get; set; }

    private void FilterByUserId(ChangeEventArgs changeEventArgs)
    {
        string errorMessage = "";
        filterById = null;
        try
        {
            filterById = int.Parse(changeEventArgs.Value.ToString());
        }
        catch (Exception e)
        {
            errorMessage = e.Message;
        }
        ExecuteFilter();
    }

    private void ExecuteFilter()
    {
        familiesToShow = allFamilies.Where(t =>
            filterById != null && t.Id == filterById || filterById == null
            ).ToList();
    }

    protected override async Task OnInitializedAsync()
    {
        var authenticationState = await AuthenticationStateTask;
        if (authenticationState?.User?.Identity is null || !authenticationState.User.Identity.IsAuthenticated)
        {
            var returnUrl = Navigation.ToBaseRelativePath(Navigation.Uri);
            
            if (string.IsNullOrWhiteSpace(returnUrl))
                Navigation.NavigateTo("/Login", true);
            else
            {
                Navigation.NavigateTo($"/Login?returnUrl={returnUrl}",true);
            }
        }
        allFamilies = FamilyService.GetFamilies();
        familiesToShow = allFamilies;
    }

    private void RemoveFamily(int adultId)
    {
        var familyToRemove = familiesToShow.First(t => t.Id == adultId);
        FamilyService.RemoveAdult(adultId);
        familiesToShow.Remove(familyToRemove);
    }

}