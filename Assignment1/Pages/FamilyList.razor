@page "/Families"
@using Assignment1.Data
@using Assignment1.Models
@inject IFamiliesService FamilyService

<h1 xmlns="http://www.w3.org/1999/html">Family list</h1>
<p>
    Filter by User Id: <input type="number" style="width:50px"/>
</p>
<p>
    Filter by completed status:
    <select class="form-control selectpicker" style="width:100px">
        <option>Both</option>
        <option>False</option>
        <option>True</option>
    </select>
</p>
@if (familiesToShow == null) {
    <p>
        <em>Loading...</em>
    </p>
} else if (!familiesToShow.Any()) {
    <p>
        <em>No Family items exist. Please add some.</em>
    </p>
} else {
    <table class="table">
        <thead>
        <tr>
            <th>User ID</th>
            <th>Family ID</th>
            <th>Title</th>
            <th>Remove</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var item in familiesToShow) {
            <tr>
                <td>@item.UserId</td>
                <td>@item.FamilyId</td>
                <td>@item.Title</td>
            </tr>
        }
        </tbody>
    </table>
}

@code {
    private IList<Family> familiesToShow;
    private IList<Family> allFamilies;

    private int? filterById;
    private bool? filterByIsCompleted;

    private void FilterByUserId(ChangeEventArgs changeEventArgs) {
        filterById = null;
        try {
            filterById = int.Parse(changeEventArgs.Value.ToString());
        } catch (Exception e) { }
        ExecuteFilter();
    }

    private void FilterByCompletedStatus(ChangeEventArgs args) {
        filterByIsCompleted = null;
        try {
            filterByIsCompleted = bool.Parse(args.Value.ToString());
        } catch (Exception e) { }
        ExecuteFilter();
    }

    private void ExecuteFilter() {
        familiesToShow = allFamilies.Where(t => 
            (filterById != null && t.UserId == filterById || filterById == null) //&&
           // (filterByIsCompleted != null && t.IsCompleted == filterByIsCompleted || filterByIsCompleted == null)
        ).ToList();
    }

    protected override async Task OnInitializedAsync() {
        allFamilies = FamilyService.GetFamilies();
        familiesToShow = allFamilies;
    }

    private void RemoveFamily(int familyId) {
        Family familyToRemove = familiesToShow.First(t => t.FamilyId == familyId);
        FamilyService.RemoveFamily(familyId);
        familiesToShow.Remove(familyToRemove);
    }

    private void CompletedChange(ChangeEventArgs evt, Family family) {
        //family.IsCompleted = (bool) evt.Value;
        FamilyService.Update(family);
    }

}